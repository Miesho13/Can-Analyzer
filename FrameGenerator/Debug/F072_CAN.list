
F072_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002d38  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009832  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001605  00000000  00000000  00029866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877b  00000000  00000000  0002bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009316  00000000  00000000  00044433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ede1  00000000  00000000  0004d749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc52a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001954  00000000  00000000  000dc57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cd4 	.word	0x08002cd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cd4 	.word	0x08002cd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

}
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	b002      	add	sp, #8
 800022e:	bd80      	pop	{r7, pc}

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fb1d 	bl	8000874 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f891 	bl	8000360 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f981 	bl	8000544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000242:	f000 f94f 	bl	80004e4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000246:	f000 f8ed 	bl	8000424 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 800024a:	4b3f      	ldr	r3, [pc, #252]	; (8000348 <main+0x118>)
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fd89 	bl	8000d64 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000252:	4b3d      	ldr	r3, [pc, #244]	; (8000348 <main+0x118>)
 8000254:	2102      	movs	r1, #2
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fea8 	bl	8000fac <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 800025c:	4b3b      	ldr	r3, [pc, #236]	; (800034c <main+0x11c>)
 800025e:	2201      	movs	r2, #1
 8000260:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000262:	4b3a      	ldr	r3, [pc, #232]	; (800034c <main+0x11c>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000268:	4b38      	ldr	r3, [pc, #224]	; (800034c <main+0x11c>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800026e:	4b37      	ldr	r3, [pc, #220]	; (800034c <main+0x11c>)
 8000270:	2200      	movs	r2, #0
 8000272:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x102;
 8000274:	4b35      	ldr	r3, [pc, #212]	; (800034c <main+0x11c>)
 8000276:	2281      	movs	r2, #129	; 0x81
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800027c:	4b33      	ldr	r3, [pc, #204]	; (800034c <main+0x11c>)
 800027e:	2200      	movs	r2, #0
 8000280:	751a      	strb	r2, [r3, #20]

  TxData[0]= 0x11;
 8000282:	4b33      	ldr	r3, [pc, #204]	; (8000350 <main+0x120>)
 8000284:	2211      	movs	r2, #17
 8000286:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000288:	2390      	movs	r3, #144	; 0x90
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2201      	movs	r2, #1
 800028e:	2120      	movs	r1, #32
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fb3c 	bl	800190e <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);			//sygnalizacja dzialania petli
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fb35 	bl	800190e <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){		//wcisniecie przycisku zaczyna wyliczanie i wysylanie kolejnych adresow
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	019b      	lsls	r3, r3, #6
 80002a8:	4a2a      	ldr	r2, [pc, #168]	; (8000354 <main+0x124>)
 80002aa:	0019      	movs	r1, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	f001 fb11 	bl	80018d4 <HAL_GPIO_ReadPin>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d1ef      	bne.n	8000296 <main+0x66>
		  for(int i=1;i<(0xEFF-1);i++){						//wyliczanie od 1 do max adresu w STANDARD CAN
 80002b6:	2301      	movs	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e040      	b.n	800033e <main+0x10e>
		  TxHeader.StdId=i;
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4b23      	ldr	r3, [pc, #140]	; (800034c <main+0x11c>)
 80002c0:	601a      	str	r2, [r3, #0]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80002c2:	4b25      	ldr	r3, [pc, #148]	; (8000358 <main+0x128>)
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <main+0x120>)
 80002c6:	4921      	ldr	r1, [pc, #132]	; (800034c <main+0x11c>)
 80002c8:	481f      	ldr	r0, [pc, #124]	; (8000348 <main+0x118>)
 80002ca:	f000 fd91 	bl	8000df0 <HAL_CAN_AddTxMessage>
		  HAL_Delay(500);
 80002ce:	23fa      	movs	r3, #250	; 0xfa
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fb32 	bl	800093c <HAL_Delay>

		  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){	//wyjscie z podwojnym sprawdzeniem przycisku i mrugnieciem ledem
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	019b      	lsls	r3, r3, #6
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <main+0x124>)
 80002de:	0019      	movs	r1, r3
 80002e0:	0010      	movs	r0, r2
 80002e2:	f001 faf7 	bl	80018d4 <HAL_GPIO_ReadPin>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d126      	bne.n	8000338 <main+0x108>
			  HAL_Delay(500);
 80002ea:	23fa      	movs	r3, #250	; 0xfa
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fb24 	bl	800093c <HAL_Delay>
			  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	019b      	lsls	r3, r3, #6
 80002f8:	4a16      	ldr	r2, [pc, #88]	; (8000354 <main+0x124>)
 80002fa:	0019      	movs	r1, r3
 80002fc:	0010      	movs	r0, r2
 80002fe:	f001 fae9 	bl	80018d4 <HAL_GPIO_ReadPin>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d118      	bne.n	8000338 <main+0x108>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	2200      	movs	r2, #0
 800030c:	2120      	movs	r1, #32
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fafd 	bl	800190e <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8000314:	23fa      	movs	r3, #250	; 0xfa
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fb0f 	bl	800093c <HAL_Delay>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	2201      	movs	r2, #1
 8000324:	2120      	movs	r1, #32
 8000326:	0018      	movs	r0, r3
 8000328:	f001 faf1 	bl	800190e <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800032c:	23fa      	movs	r3, #250	; 0xfa
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fb03 	bl	800093c <HAL_Delay>
			  break;
 8000336:	e006      	b.n	8000346 <main+0x116>
		  for(int i=1;i<(0xEFF-1);i++){						//wyliczanie od 1 do max adresu w STANDARD CAN
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a06      	ldr	r2, [pc, #24]	; (800035c <main+0x12c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	ddba      	ble.n	80002bc <main+0x8c>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);			//sygnalizacja dzialania petli
 8000346:	e7a6      	b.n	8000296 <main+0x66>
 8000348:	20000028 	.word	0x20000028
 800034c:	200000d4 	.word	0x200000d4
 8000350:	200000f0 	.word	0x200000f0
 8000354:	48000800 	.word	0x48000800
 8000358:	200000ec 	.word	0x200000ec
 800035c:	00000efd 	.word	0x00000efd

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b099      	sub	sp, #100	; 0x64
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	242c      	movs	r4, #44	; 0x2c
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2334      	movs	r3, #52	; 0x34
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 fca7 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	231c      	movs	r3, #28
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	2310      	movs	r3, #16
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 fc9f 	bl	8002cc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	231c      	movs	r3, #28
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 fc98 	bl	8002cc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	0021      	movs	r1, r4
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2202      	movs	r2, #2
 800039a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2201      	movs	r2, #1
 80003a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2210      	movs	r2, #16
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2202      	movs	r2, #2
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0212      	lsls	r2, r2, #8
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	22e0      	movs	r2, #224	; 0xe0
 80003ba:	0352      	lsls	r2, r2, #13
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2201      	movs	r2, #1
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fabe 	bl	8001948 <HAL_RCC_OscConfig>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003d0:	f000 f930 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	211c      	movs	r1, #28
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2202      	movs	r2, #2
 80003e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2101      	movs	r1, #1
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fe2e 	bl	8002054 <HAL_RCC_ClockConfig>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003fc:	f000 f91a 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000400:	003b      	movs	r3, r7
 8000402:	2202      	movs	r2, #2
 8000404:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000406:	003b      	movs	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	003b      	movs	r3, r7
 800040e:	0018      	movs	r0, r3
 8000410:	f001 ff9a 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000418:	f000 f90c 	bl	8000634 <Error_Handler>
  }
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b019      	add	sp, #100	; 0x64
 8000422:	bd90      	pop	{r4, r7, pc}

08000424 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_CAN_Init+0xb4>)
 800042c:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <MX_CAN_Init+0xb8>)
 800042e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000432:	2212      	movs	r2, #18
 8000434:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800043c:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_CAN_Init+0xb4>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000444:	22e0      	movs	r2, #224	; 0xe0
 8000446:	02d2      	lsls	r2, r2, #11
 8000448:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_CAN_Init+0xb4>)
 800044c:	22c0      	movs	r2, #192	; 0xc0
 800044e:	03d2      	lsls	r2, r2, #15
 8000450:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000454:	2200      	movs	r2, #0
 8000456:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_CAN_Init+0xb4>)
 800045a:	2200      	movs	r2, #0
 800045c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000460:	2200      	movs	r2, #0
 8000462:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000466:	2200      	movs	r2, #0
 8000468:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_CAN_Init+0xb4>)
 800046c:	2200      	movs	r2, #0
 800046e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000472:	2200      	movs	r2, #0
 8000474:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_CAN_Init+0xb4>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fa83 	bl	8000984 <HAL_CAN_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000482:	f000 f8d7 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000486:	003b      	movs	r3, r7
 8000488:	2201      	movs	r2, #1
 800048a:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800048c:	003b      	movs	r3, r7
 800048e:	2212      	movs	r2, #18
 8000490:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000492:	003b      	movs	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8000498:	003b      	movs	r3, r7
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <MX_CAN_Init+0xbc>)
 800049c:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800049e:	003b      	movs	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80004a4:	003b      	movs	r3, r7
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <MX_CAN_Init+0xbc>)
 80004a8:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80004aa:	003b      	movs	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004b0:	003b      	movs	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004b6:	003b      	movs	r3, r7
 80004b8:	2201      	movs	r2, #1
 80004ba:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80004bc:	003b      	movs	r3, r7
 80004be:	2214      	movs	r2, #20
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80004c2:	003a      	movs	r2, r7
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <MX_CAN_Init+0xb4>)
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fb59 	bl	8000b80 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b00a      	add	sp, #40	; 0x28
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000028 	.word	0x20000028
 80004dc:	40006400 	.word	0x40006400
 80004e0:	00002060 	.word	0x00002060

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART2_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f0:	2296      	movs	r2, #150	; 0x96
 80004f2:	0212      	lsls	r2, r2, #8
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000528:	0018      	movs	r0, r3
 800052a:	f002 f80b 	bl	8002544 <HAL_UART_Init>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 f87f 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000050 	.word	0x20000050
 8000540:	40004400 	.word	0x40004400

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b08b      	sub	sp, #44	; 0x2c
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	2414      	movs	r4, #20
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2314      	movs	r3, #20
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 fbb5 	bl	8002cc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b34      	ldr	r3, [pc, #208]	; (800062c <MX_GPIO_Init+0xe8>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <MX_GPIO_Init+0xe8>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0309      	lsls	r1, r1, #12
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <MX_GPIO_Init+0xe8>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	031b      	lsls	r3, r3, #12
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000576:	4b2d      	ldr	r3, [pc, #180]	; (800062c <MX_GPIO_Init+0xe8>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b2c      	ldr	r3, [pc, #176]	; (800062c <MX_GPIO_Init+0xe8>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	03c9      	lsls	r1, r1, #15
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <MX_GPIO_Init+0xe8>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	03db      	lsls	r3, r3, #15
 800058c:	4013      	ands	r3, r2
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b26      	ldr	r3, [pc, #152]	; (800062c <MX_GPIO_Init+0xe8>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_GPIO_Init+0xe8>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_GPIO_Init+0xe8>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_GPIO_Init+0xe8>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_GPIO_Init+0xe8>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	02c9      	lsls	r1, r1, #11
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_GPIO_Init+0xe8>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	02db      	lsls	r3, r3, #11
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f99b 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0192      	lsls	r2, r2, #6
 80005de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2284      	movs	r2, #132	; 0x84
 80005e4:	0392      	lsls	r2, r2, #14
 80005e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <MX_GPIO_Init+0xec>)
 80005f2:	0019      	movs	r1, r3
 80005f4:	0010      	movs	r0, r2
 80005f6:	f000 fff5 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2220      	movs	r2, #32
 8000600:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000614:	187a      	adds	r2, r7, r1
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f000 ffe1 	bl	80015e4 <HAL_GPIO_Init>

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b00b      	add	sp, #44	; 0x2c
 8000628:	bd90      	pop	{r4, r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000
 8000630:	48000800 	.word	0x48000800

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	699a      	ldr	r2, [r3, #24]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	619a      	str	r2, [r3, #24]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	69da      	ldr	r2, [r3, #28]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	430a      	orrs	r2, r1
 800066a:	61da      	str	r2, [r3, #28]
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_MspInit+0x44>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	055b      	lsls	r3, r3, #21
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b08b      	sub	sp, #44	; 0x2c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2414      	movs	r4, #20
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 fb12 	bl	8002cc4 <memset>
  if(hcan->Instance==CAN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <HAL_CAN_MspInit+0xa0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d13a      	bne.n	8000720 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006ac:	69da      	ldr	r2, [r3, #28]
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0489      	lsls	r1, r1, #18
 80006b4:	430a      	orrs	r2, r1
 80006b6:	61da      	str	r2, [r3, #28]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006ba:	69da      	ldr	r2, [r3, #28]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	049b      	lsls	r3, r3, #18
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	02c9      	lsls	r1, r1, #11
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_CAN_MspInit+0xa4>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	02db      	lsls	r3, r3, #11
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	22c0      	movs	r2, #192	; 0xc0
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2203      	movs	r2, #3
 80006fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2204      	movs	r2, #4
 8000702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	187b      	adds	r3, r7, r1
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <HAL_CAN_MspInit+0xa8>)
 8000708:	0019      	movs	r1, r3
 800070a:	0010      	movs	r0, r2
 800070c:	f000 ff6a 	bl	80015e4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	201e      	movs	r0, #30
 8000716:	f000 ff33 	bl	8001580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800071a:	201e      	movs	r0, #30
 800071c:	f000 ff45 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b00b      	add	sp, #44	; 0x2c
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	40006400 	.word	0x40006400
 800072c:	40021000 	.word	0x40021000
 8000730:	48000400 	.word	0x48000400

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08b      	sub	sp, #44	; 0x2c
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	2414      	movs	r4, #20
 800073e:	193b      	adds	r3, r7, r4
 8000740:	0018      	movs	r0, r3
 8000742:	2314      	movs	r3, #20
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f002 fabc 	bl	8002cc4 <memset>
  if(huart->Instance==USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d132      	bne.n	80007bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <HAL_UART_MspInit+0x94>)
 8000758:	69da      	ldr	r2, [r3, #28]
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_UART_MspInit+0x94>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0289      	lsls	r1, r1, #10
 8000760:	430a      	orrs	r2, r1
 8000762:	61da      	str	r2, [r3, #28]
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_UART_MspInit+0x94>)
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_UART_MspInit+0x94>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_UART_MspInit+0x94>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0289      	lsls	r1, r1, #10
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UART_MspInit+0x94>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	029b      	lsls	r3, r3, #10
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	220c      	movs	r2, #12
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2202      	movs	r2, #2
 800079a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2201      	movs	r2, #1
 80007ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	187a      	adds	r2, r7, r1
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 ff14 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b00b      	add	sp, #44	; 0x2c
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40004400 	.word	0x40004400
 80007c8:	40021000 	.word	0x40021000

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f888 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <CEC_CAN_IRQHandler+0x14>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fbfc 	bl	8001000 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000028 	.word	0x20000028

08000814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490e      	ldr	r1, [pc, #56]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0b      	ldr	r4, [pc, #44]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800084a:	f7ff ffe3 	bl	8000814 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800084e:	f002 fa15 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fced 	bl	8000230 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   r0, =_estack
 8000858:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000864:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 8000868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800086c:	200000fc 	.word	0x200000fc

08000870 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_COMP_IRQHandler>
	...

08000874 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_Init+0x24>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_Init+0x24>)
 800087e:	2110      	movs	r1, #16
 8000880:	430a      	orrs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f809 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088a:	f7ff fed9 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x5c>)
 80008a6:	681c      	ldr	r4, [r3, #0]
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_InitTick+0x60>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	0019      	movs	r1, r3
 80008ae:	23fa      	movs	r3, #250	; 0xfa
 80008b0:	0098      	lsls	r0, r3, #2
 80008b2:	f7ff fc29 	bl	8000108 <__udivsi3>
 80008b6:	0003      	movs	r3, r0
 80008b8:	0019      	movs	r1, r3
 80008ba:	0020      	movs	r0, r4
 80008bc:	f7ff fc24 	bl	8000108 <__udivsi3>
 80008c0:	0003      	movs	r3, r0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe81 	bl	80015ca <HAL_SYSTICK_Config>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e00f      	b.n	80008f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d80b      	bhi.n	80008ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2301      	movs	r3, #1
 80008da:	425b      	negs	r3, r3
 80008dc:	2200      	movs	r2, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fe4e 	bl	8001580 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_InitTick+0x64>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b003      	add	sp, #12
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	18d2      	adds	r2, r2, r3
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000008 	.word	0x20000008
 8000924:	200000f8 	.word	0x200000f8

08000928 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	200000f8 	.word	0x200000f8

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff fff0 	bl	8000928 <HAL_GetTick>
 8000948:	0003      	movs	r3, r0
 800094a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001a      	movs	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	189b      	adds	r3, r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	f7ff ffe0 	bl	8000928 <HAL_GetTick>
 8000968:	0002      	movs	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e0f0      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2220      	movs	r2, #32
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fe6f 	bl	8000688 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ba:	f7ff ffb5 	bl	8000928 <HAL_GetTick>
 80009be:	0003      	movs	r3, r0
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009c2:	e013      	b.n	80009ec <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c4:	f7ff ffb0 	bl	8000928 <HAL_GetTick>
 80009c8:	0002      	movs	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90c      	bls.n	80009ec <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0292      	lsls	r2, r2, #10
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2220      	movs	r2, #32
 80009e4:	2105      	movs	r1, #5
 80009e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e0c5      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	4013      	ands	r3, r2
 80009f6:	d0e5      	beq.n	80009c4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2102      	movs	r1, #2
 8000a04:	438a      	bics	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a08:	f7ff ff8e 	bl	8000928 <HAL_GetTick>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a10:	e013      	b.n	8000a3a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a12:	f7ff ff89 	bl	8000928 <HAL_GetTick>
 8000a16:	0002      	movs	r2, r0
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d90c      	bls.n	8000a3a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0292      	lsls	r2, r2, #10
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2220      	movs	r2, #32
 8000a32:	2105      	movs	r1, #5
 8000a34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e09e      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2202      	movs	r2, #2
 8000a42:	4013      	ands	r3, r2
 8000a44:	d1e5      	bne.n	8000a12 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7e1b      	ldrb	r3, [r3, #24]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d108      	bne.n	8000a60 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e007      	b.n	8000a70 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	438a      	bics	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7e5b      	ldrb	r3, [r3, #25]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e007      	b.n	8000a9a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	438a      	bics	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7e9b      	ldrb	r3, [r3, #26]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d108      	bne.n	8000ab4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2120      	movs	r1, #32
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e007      	b.n	8000ac4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2120      	movs	r1, #32
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7edb      	ldrb	r3, [r3, #27]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	438a      	bics	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2110      	movs	r1, #16
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7f1b      	ldrb	r3, [r3, #28]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d108      	bne.n	8000b08 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2108      	movs	r1, #8
 8000b02:	430a      	orrs	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2108      	movs	r1, #8
 8000b14:	438a      	bics	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7f5b      	ldrb	r3, [r3, #29]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d108      	bne.n	8000b32 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	438a      	bics	r2, r1
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0011      	movs	r1, r2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2220      	movs	r2, #32
 8000b72:	2101      	movs	r1, #1
 8000b74:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b90:	2013      	movs	r0, #19
 8000b92:	183b      	adds	r3, r7, r0
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	2120      	movs	r1, #32
 8000b98:	5c52      	ldrb	r2, [r2, r1]
 8000b9a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	18bb      	adds	r3, r7, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d004      	beq.n	8000bb0 <HAL_CAN_ConfigFilter+0x30>
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d000      	beq.n	8000bb0 <HAL_CAN_ConfigFilter+0x30>
 8000bae:	e0cd      	b.n	8000d4c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	58d3      	ldr	r3, [r2, r3]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	221f      	movs	r2, #31
 8000bcc:	4013      	ands	r3, r2
 8000bce:	2201      	movs	r2, #1
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	2387      	movs	r3, #135	; 0x87
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	58d3      	ldr	r3, [r2, r3]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	2387      	movs	r3, #135	; 0x87
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d129      	bne.n	8000c4a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	2383      	movs	r3, #131	; 0x83
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	0011      	movs	r1, r2
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	2383      	movs	r3, #131	; 0x83
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	041b      	lsls	r3, r3, #16
 8000c1a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c20:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3248      	adds	r2, #72	; 0x48
 8000c26:	00d2      	lsls	r2, r2, #3
 8000c28:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c3e:	6979      	ldr	r1, [r7, #20]
 8000c40:	3348      	adds	r3, #72	; 0x48
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	18cb      	adds	r3, r1, r3
 8000c46:	3304      	adds	r3, #4
 8000c48:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d128      	bne.n	8000ca4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	2383      	movs	r3, #131	; 0x83
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	58d2      	ldr	r2, [r2, r3]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	0011      	movs	r1, r2
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	2383      	movs	r3, #131	; 0x83
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c7a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3248      	adds	r2, #72	; 0x48
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c98:	6979      	ldr	r1, [r7, #20]
 8000c9a:	3348      	adds	r3, #72	; 0x48
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	18cb      	adds	r3, r1, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10c      	bne.n	8000cc6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	2381      	movs	r3, #129	; 0x81
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	58d3      	ldr	r3, [r2, r3]
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	43d2      	mvns	r2, r2
 8000cb8:	401a      	ands	r2, r3
 8000cba:	0011      	movs	r1, r2
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	2381      	movs	r3, #129	; 0x81
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	50d1      	str	r1, [r2, r3]
 8000cc4:	e00a      	b.n	8000cdc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	2381      	movs	r3, #129	; 0x81
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	58d2      	ldr	r2, [r2, r3]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	2381      	movs	r3, #129	; 0x81
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10c      	bne.n	8000cfe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	2385      	movs	r3, #133	; 0x85
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	43d2      	mvns	r2, r2
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	2385      	movs	r3, #133	; 0x85
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	50d1      	str	r1, [r2, r3]
 8000cfc:	e00a      	b.n	8000d14 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	2385      	movs	r3, #133	; 0x85
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	58d2      	ldr	r2, [r2, r3]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	2385      	movs	r3, #133	; 0x85
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10a      	bne.n	8000d32 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	2387      	movs	r3, #135	; 0x87
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	58d2      	ldr	r2, [r2, r3]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	0011      	movs	r1, r2
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	2387      	movs	r3, #135	; 0x87
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	58d3      	ldr	r3, [r2, r3]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4393      	bics	r3, r2
 8000d3e:	0019      	movs	r1, r3
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	02d2      	lsls	r2, r2, #11
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
  }
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b006      	add	sp, #24
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2220      	movs	r2, #32
 8000d70:	5c9b      	ldrb	r3, [r3, r2]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d12f      	bne.n	8000dd8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d90:	f7ff fdca 	bl	8000928 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d98:	e013      	b.n	8000dc2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d9a:	f7ff fdc5 	bl	8000928 <HAL_GetTick>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d90c      	bls.n	8000dc2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	0292      	lsls	r2, r2, #10
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	2105      	movs	r1, #5
 8000dbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e012      	b.n	8000de8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1e5      	bne.n	8000d9a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0312      	lsls	r2, r2, #12
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b004      	add	sp, #16
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dfe:	201f      	movs	r0, #31
 8000e00:	183b      	adds	r3, r7, r0
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	2120      	movs	r1, #32
 8000e06:	5c52      	ldrb	r2, [r2, r1]
 8000e08:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d004      	beq.n	8000e24 <HAL_CAN_AddTxMessage+0x34>
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d000      	beq.n	8000e24 <HAL_CAN_AddTxMessage+0x34>
 8000e22:	e0b7      	b.n	8000f94 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	04db      	lsls	r3, r3, #19
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d10a      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	051b      	lsls	r3, r3, #20
 8000e34:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e36:	d105      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	055b      	lsls	r3, r3, #21
 8000e3e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e40:	d100      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
 8000e42:	e09e      	b.n	8000f82 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	0e1b      	lsrs	r3, r3, #24
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d908      	bls.n	8000e66 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	0412      	lsls	r2, r2, #16
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e09e      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4311      	orrs	r1, r2
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	3218      	adds	r2, #24
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	50d1      	str	r1, [r2, r3]
 8000e90:	e00f      	b.n	8000eb2 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000ea8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	3218      	adds	r2, #24
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3318      	adds	r3, #24
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	18cb      	adds	r3, r1, r3
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	7d1b      	ldrb	r3, [r3, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d112      	bne.n	8000ef4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3304      	adds	r3, #4
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6819      	ldr	r1, [r3, #0]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3318      	adds	r3, #24
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	18cb      	adds	r3, r1, r3
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	061a      	lsls	r2, r3, #24
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3306      	adds	r3, #6
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3305      	adds	r3, #5
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	0019      	movs	r1, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	6979      	ldr	r1, [r7, #20]
 8000f20:	23c6      	movs	r3, #198	; 0xc6
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	0109      	lsls	r1, r1, #4
 8000f26:	1841      	adds	r1, r0, r1
 8000f28:	18cb      	adds	r3, r1, r3
 8000f2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3303      	adds	r3, #3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	061a      	lsls	r2, r3, #24
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3302      	adds	r3, #2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	6979      	ldr	r1, [r7, #20]
 8000f56:	23c4      	movs	r3, #196	; 0xc4
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	0109      	lsls	r1, r1, #4
 8000f5c:	1841      	adds	r1, r0, r1
 8000f5e:	18cb      	adds	r3, r1, r3
 8000f60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	3218      	adds	r2, #24
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	58d2      	ldr	r2, [r2, r3]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2101      	movs	r1, #1
 8000f74:	4311      	orrs	r1, r2
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	3218      	adds	r2, #24
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e010      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0392      	lsls	r2, r2, #14
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	02d2      	lsls	r2, r2, #11
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
  }
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b008      	add	sp, #32
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	5c52      	ldrb	r2, [r2, r1]
 8000fc0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	18bb      	adds	r3, r7, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d003      	beq.n	8000fd4 <HAL_CAN_ActivateNotification+0x28>
 8000fcc:	18bb      	adds	r3, r7, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d109      	bne.n	8000fe8 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6959      	ldr	r1, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	02d2      	lsls	r2, r2, #11
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
  }
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	2201      	movs	r2, #1
 8001040:	4013      	ands	r3, r2
 8001042:	d100      	bne.n	8001046 <HAL_CAN_IRQHandler+0x46>
 8001044:	e084      	b.n	8001150 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2201      	movs	r2, #1
 800104a:	4013      	ands	r3, r2
 800104c:	d024      	beq.n	8001098 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d004      	beq.n	8001068 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f000 f981 	bl	8001368 <HAL_CAN_TxMailbox0CompleteCallback>
 8001066:	e017      	b.n	8001098 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	d005      	beq.n	800107c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	4313      	orrs	r3, r2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e00d      	b.n	8001098 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2208      	movs	r2, #8
 8001080:	4013      	ands	r3, r2
 8001082:	d005      	beq.n	8001090 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0152      	lsls	r2, r2, #5
 800108a:	4313      	orrs	r3, r2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e003      	b.n	8001098 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f980 	bl	8001398 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	d028      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0052      	lsls	r2, r2, #1
 80010aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4013      	ands	r3, r2
 80010b4:	d004      	beq.n	80010c0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 f95d 	bl	8001378 <HAL_CAN_TxMailbox1CompleteCallback>
 80010be:	e019      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4013      	ands	r3, r2
 80010c8:	d005      	beq.n	80010d6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	0192      	lsls	r2, r2, #6
 80010d0:	4313      	orrs	r3, r2
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
 80010d4:	e00e      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4013      	ands	r3, r2
 80010de:	d005      	beq.n	80010ec <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	4313      	orrs	r3, r2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e003      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f95a 	bl	80013a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	4013      	ands	r3, r2
 80010fc:	d028      	beq.n	8001150 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d004      	beq.n	800111c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f937 	bl	8001388 <HAL_CAN_TxMailbox2CompleteCallback>
 800111a:	e019      	b.n	8001150 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	02db      	lsls	r3, r3, #11
 8001122:	4013      	ands	r3, r2
 8001124:	d005      	beq.n	8001132 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	0212      	lsls	r2, r2, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	e00e      	b.n	8001150 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	4013      	ands	r3, r2
 800113a:	d005      	beq.n	8001148 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	0252      	lsls	r2, r2, #9
 8001142:	4313      	orrs	r3, r2
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e003      	b.n	8001150 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0018      	movs	r0, r3
 800114c:	f000 f934 	bl	80013b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	2208      	movs	r2, #8
 8001154:	4013      	ands	r3, r2
 8001156:	d00c      	beq.n	8001172 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2210      	movs	r2, #16
 800115c:	4013      	ands	r3, r2
 800115e:	d008      	beq.n	8001172 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4313      	orrs	r3, r2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	2204      	movs	r2, #4
 8001176:	4013      	ands	r3, r2
 8001178:	d00b      	beq.n	8001192 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2208      	movs	r2, #8
 800117e:	4013      	ands	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2208      	movs	r2, #8
 8001188:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f91b 	bl	80013c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d009      	beq.n	80011ae <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff f839 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	4013      	ands	r3, r2
 80011b4:	d00c      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2210      	movs	r2, #16
 80011ba:	4013      	ands	r3, r2
 80011bc:	d008      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	00d2      	lsls	r2, r2, #3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2210      	movs	r2, #16
 80011ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	2220      	movs	r2, #32
 80011d4:	4013      	ands	r3, r2
 80011d6:	d00b      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2208      	movs	r2, #8
 80011dc:	4013      	ands	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2208      	movs	r2, #8
 80011e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f8fc 	bl	80013e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2210      	movs	r2, #16
 80011f4:	4013      	ands	r3, r2
 80011f6:	d009      	beq.n	800120c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2203      	movs	r2, #3
 8001200:	4013      	ands	r3, r2
 8001202:	d003      	beq.n	800120c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0018      	movs	r0, r3
 8001208:	f000 f8e6 	bl	80013d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800120c:	6a3a      	ldr	r2, [r7, #32]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	4013      	ands	r3, r2
 8001214:	d00b      	beq.n	800122e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2210      	movs	r2, #16
 800121a:	4013      	ands	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0018      	movs	r0, r3
 800122a:	f000 f8e5 	bl	80013f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800122e:	6a3a      	ldr	r2, [r7, #32]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	4013      	ands	r3, r2
 8001236:	d00b      	beq.n	8001250 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2208      	movs	r2, #8
 800123c:	4013      	ands	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2208      	movs	r2, #8
 8001246:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f8dc 	bl	8001408 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001250:	6a3a      	ldr	r2, [r7, #32]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_CAN_IRQHandler+0x25c>
 800125a:	e074      	b.n	8001346 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_CAN_IRQHandler+0x266>
 8001264:	e06b      	b.n	800133e <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001276:	d003      	beq.n	8001280 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	2201      	movs	r2, #1
 800127c:	4313      	orrs	r3, r2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001280:	6a3a      	ldr	r2, [r7, #32]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2202      	movs	r2, #2
 800128e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001290:	d003      	beq.n	800129a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	4313      	orrs	r3, r2
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	d007      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012aa:	d003      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	2204      	movs	r2, #4
 80012b0:	4313      	orrs	r3, r2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d03f      	beq.n	800133e <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2270      	movs	r2, #112	; 0x70
 80012c2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012c4:	d03b      	beq.n	800133e <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2270      	movs	r2, #112	; 0x70
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b60      	cmp	r3, #96	; 0x60
 80012ce:	d027      	beq.n	8001320 <HAL_CAN_IRQHandler+0x320>
 80012d0:	d82c      	bhi.n	800132c <HAL_CAN_IRQHandler+0x32c>
 80012d2:	2b50      	cmp	r3, #80	; 0x50
 80012d4:	d01f      	beq.n	8001316 <HAL_CAN_IRQHandler+0x316>
 80012d6:	d829      	bhi.n	800132c <HAL_CAN_IRQHandler+0x32c>
 80012d8:	2b40      	cmp	r3, #64	; 0x40
 80012da:	d017      	beq.n	800130c <HAL_CAN_IRQHandler+0x30c>
 80012dc:	d826      	bhi.n	800132c <HAL_CAN_IRQHandler+0x32c>
 80012de:	2b30      	cmp	r3, #48	; 0x30
 80012e0:	d00f      	beq.n	8001302 <HAL_CAN_IRQHandler+0x302>
 80012e2:	d823      	bhi.n	800132c <HAL_CAN_IRQHandler+0x32c>
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d002      	beq.n	80012ee <HAL_CAN_IRQHandler+0x2ee>
 80012e8:	2b20      	cmp	r3, #32
 80012ea:	d005      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012ec:	e01e      	b.n	800132c <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	2208      	movs	r2, #8
 80012f2:	4313      	orrs	r3, r2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f6:	e01a      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2210      	movs	r2, #16
 80012fc:	4313      	orrs	r3, r2
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001300:	e015      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	2220      	movs	r2, #32
 8001306:	4313      	orrs	r3, r2
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800130a:	e010      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	4313      	orrs	r3, r2
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001314:	e00b      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	4313      	orrs	r3, r2
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800131e:	e006      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	0052      	lsls	r2, r2, #1
 8001326:	4313      	orrs	r3, r2
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132a:	e000      	b.n	800132e <HAL_CAN_IRQHandler+0x32e>
            break;
 800132c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2170      	movs	r1, #112	; 0x70
 800133a:	438a      	bics	r2, r1
 800133c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2204      	movs	r2, #4
 8001344:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2b00      	cmp	r3, #0
 800134a:	d009      	beq.n	8001360 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f85c 	bl	8001418 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b00a      	add	sp, #40	; 0x28
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	0002      	movs	r2, r0
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b7f      	cmp	r3, #127	; 0x7f
 800143a:	d809      	bhi.n	8001450 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	001a      	movs	r2, r3
 8001442:	231f      	movs	r3, #31
 8001444:	401a      	ands	r2, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_EnableIRQ+0x30>)
 8001448:	2101      	movs	r1, #1
 800144a:	4091      	lsls	r1, r2
 800144c:	000a      	movs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	0002      	movs	r2, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b7f      	cmp	r3, #127	; 0x7f
 8001470:	d828      	bhi.n	80014c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <__NVIC_SetPriority+0xd4>)
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b25b      	sxtb	r3, r3
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	33c0      	adds	r3, #192	; 0xc0
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	589b      	ldr	r3, [r3, r2]
 8001482:	1dfa      	adds	r2, r7, #7
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	0011      	movs	r1, r2
 8001488:	2203      	movs	r2, #3
 800148a:	400a      	ands	r2, r1
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	21ff      	movs	r1, #255	; 0xff
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	43d2      	mvns	r2, r2
 8001496:	401a      	ands	r2, r3
 8001498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	22ff      	movs	r2, #255	; 0xff
 80014a0:	401a      	ands	r2, r3
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	2303      	movs	r3, #3
 80014aa:	4003      	ands	r3, r0
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <__NVIC_SetPriority+0xd4>)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	430a      	orrs	r2, r1
 80014bc:	33c0      	adds	r3, #192	; 0xc0
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014c2:	e031      	b.n	8001528 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <__NVIC_SetPriority+0xd8>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	0019      	movs	r1, r3
 80014cc:	230f      	movs	r3, #15
 80014ce:	400b      	ands	r3, r1
 80014d0:	3b08      	subs	r3, #8
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3306      	adds	r3, #6
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1dfa      	adds	r2, r7, #7
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	0011      	movs	r1, r2
 80014e4:	2203      	movs	r2, #3
 80014e6:	400a      	ands	r2, r1
 80014e8:	00d2      	lsls	r2, r2, #3
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	401a      	ands	r2, r3
 80014f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	401a      	ands	r2, r3
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	2303      	movs	r3, #3
 8001506:	4003      	ands	r3, r0
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <__NVIC_SetPriority+0xd8>)
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001c      	movs	r4, r3
 8001514:	230f      	movs	r3, #15
 8001516:	4023      	ands	r3, r4
 8001518:	3b08      	subs	r3, #8
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	430a      	orrs	r2, r1
 800151e:	3306      	adds	r3, #6
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	18c3      	adds	r3, r0, r3
 8001524:	3304      	adds	r3, #4
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b003      	add	sp, #12
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	045b      	lsls	r3, r3, #17
 8001548:	429a      	cmp	r2, r3
 800154a:	d301      	bcc.n	8001550 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154c:	2301      	movs	r3, #1
 800154e:	e010      	b.n	8001572 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <SysTick_Config+0x44>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	3a01      	subs	r2, #1
 8001556:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001558:	2301      	movs	r3, #1
 800155a:	425b      	negs	r3, r3
 800155c:	2103      	movs	r1, #3
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff ff7c 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x44>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x44>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	210f      	movs	r1, #15
 800158c:	187b      	adds	r3, r7, r1
 800158e:	1c02      	adds	r2, r0, #0
 8001590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	187b      	adds	r3, r7, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	0002      	movs	r2, r0
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff33 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ffaf 	bl	8001538 <SysTick_Config>
 80015da:	0003      	movs	r3, r0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	e155      	b.n	80018a0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <HAL_GPIO_Init+0x28>
 800160a:	e146      	b.n	800189a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4013      	ands	r3, r2
 8001614:	2b01      	cmp	r3, #1
 8001616:	d005      	beq.n	8001624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2203      	movs	r2, #3
 800161e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001620:	2b02      	cmp	r3, #2
 8001622:	d130      	bne.n	8001686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	43da      	mvns	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	2201      	movs	r2, #1
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	4013      	ands	r3, r2
 800168e:	2b03      	cmp	r3, #3
 8001690:	d017      	beq.n	80016c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d123      	bne.n	8001716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	58d3      	ldr	r3, [r2, r3]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2107      	movs	r1, #7
 80016fa:	400b      	ands	r3, r1
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	6939      	ldr	r1, [r7, #16]
 8001714:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	401a      	ands	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	d100      	bne.n	8001758 <HAL_GPIO_Init+0x174>
 8001756:	e0a0      	b.n	800189a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	4b56      	ldr	r3, [pc, #344]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 800175e:	2101      	movs	r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_GPIO_Init+0x2d4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x2d8>)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	589b      	ldr	r3, [r3, r2]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2203      	movs	r2, #3
 8001782:	4013      	ands	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	2390      	movs	r3, #144	; 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	429a      	cmp	r2, r3
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x1ee>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <HAL_GPIO_Init+0x2dc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x1ea>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_GPIO_Init+0x2e0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x1e6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <HAL_GPIO_Init+0x2e4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x1e2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a44      	ldr	r2, [pc, #272]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x1de>
 80017be:	2304      	movs	r3, #4
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_Init+0x1f0>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x1f0>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x1f0>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x1f0>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x1f0>
 80017d2:	2300      	movs	r3, #0
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	2103      	movs	r1, #3
 80017d8:	400a      	ands	r2, r1
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e4:	4935      	ldr	r1, [pc, #212]	; (80018bc <HAL_GPIO_Init+0x2d8>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4013      	ands	r3, r2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43da      	mvns	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	035b      	lsls	r3, r3, #13
 800185e:	4013      	ands	r3, r2
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43da      	mvns	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	039b      	lsls	r3, r3, #14
 8001888:	4013      	ands	r3, r2
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	1e13      	subs	r3, r2, #0
 80018aa:	d000      	beq.n	80018ae <HAL_GPIO_Init+0x2ca>
 80018ac:	e6a2      	b.n	80015f4 <HAL_GPIO_Init+0x10>
  } 
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b006      	add	sp, #24
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	000a      	movs	r2, r1
 80018de:	1cbb      	adds	r3, r7, #2
 80018e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	1cba      	adds	r2, r7, #2
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	4013      	ands	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018ee:	230f      	movs	r3, #15
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e003      	b.n	8001900 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f8:	230f      	movs	r3, #15
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	781b      	ldrb	r3, [r3, #0]
  }
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	0008      	movs	r0, r1
 8001918:	0011      	movs	r1, r2
 800191a:	1cbb      	adds	r3, r7, #2
 800191c:	1c02      	adds	r2, r0, #0
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	1c7b      	adds	r3, r7, #1
 8001922:	1c0a      	adds	r2, r1, #0
 8001924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001926:	1c7b      	adds	r3, r7, #1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	1cbb      	adds	r3, r7, #2
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001936:	e003      	b.n	8001940 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001938:	1cbb      	adds	r3, r7, #2
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f000 fb76 	bl	8002048 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	d100      	bne.n	8001968 <HAL_RCC_OscConfig+0x20>
 8001966:	e08e      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001968:	4bc5      	ldr	r3, [pc, #788]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	2b04      	cmp	r3, #4
 8001972:	d00e      	beq.n	8001992 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001974:	4bc2      	ldr	r3, [pc, #776]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d117      	bne.n	80019b0 <HAL_RCC_OscConfig+0x68>
 8001980:	4bbf      	ldr	r3, [pc, #764]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	401a      	ands	r2, r3
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	429a      	cmp	r2, r3
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4bbb      	ldr	r3, [pc, #748]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x58>
 800199e:	e071      	b.n	8001a84 <HAL_RCC_OscConfig+0x13c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d000      	beq.n	80019aa <HAL_RCC_OscConfig+0x62>
 80019a8:	e06c      	b.n	8001a84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f000 fb4c 	bl	8002048 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x80>
 80019b8:	4bb1      	ldr	r3, [pc, #708]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4bb0      	ldr	r3, [pc, #704]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	0249      	lsls	r1, r1, #9
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e02f      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0xa2>
 80019d0:	4bab      	ldr	r3, [pc, #684]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4baa      	ldr	r3, [pc, #680]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019d6:	49ab      	ldr	r1, [pc, #684]	; (8001c84 <HAL_RCC_OscConfig+0x33c>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4ba8      	ldr	r3, [pc, #672]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4ba7      	ldr	r3, [pc, #668]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019e2:	49a9      	ldr	r1, [pc, #676]	; (8001c88 <HAL_RCC_OscConfig+0x340>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e01e      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0xc8>
 80019f2:	4ba3      	ldr	r3, [pc, #652]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4ba2      	ldr	r3, [pc, #648]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	02c9      	lsls	r1, r1, #11
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b9f      	ldr	r3, [pc, #636]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b9e      	ldr	r3, [pc, #632]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 8001a10:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a16:	499b      	ldr	r1, [pc, #620]	; (8001c84 <HAL_RCC_OscConfig+0x33c>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b98      	ldr	r3, [pc, #608]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b97      	ldr	r3, [pc, #604]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a22:	4999      	ldr	r1, [pc, #612]	; (8001c88 <HAL_RCC_OscConfig+0x340>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe ff7a 	bl	8000928 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3a:	f7fe ff75 	bl	8000928 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	; 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2fd      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0xf2>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ff65 	bl	8000928 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7fe ff60 	bl	8000928 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e2e8      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x11c>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x14a>
 8001a90:	e06c      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a92:	4b7b      	ldr	r3, [pc, #492]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a9c:	4b78      	ldr	r3, [pc, #480]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d11f      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1a0>
 8001aa8:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x188>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2bb      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	22f8      	movs	r2, #248	; 0xf8
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00da      	lsls	r2, r3, #3
 8001ae0:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e041      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d024      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7fe ff14 	bl	8000928 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7fe ff0f 	bl	8000928 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e297      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0f1      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22f8      	movs	r2, #248	; 0xf8
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00da      	lsls	r2, r3, #3
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e018      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	438a      	bics	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe feef 	bl	8000928 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7fe feea 	bl	8000928 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e272      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f1      	bne.n	8001b50 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	4013      	ands	r3, r2
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fecd 	bl	8000928 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7fe fec8 	bl	8000928 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e250      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f1      	beq.n	8001b94 <HAL_RCC_OscConfig+0x24c>
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe feb3 	bl	8000928 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe feae 	bl	8000928 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e236      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1f1      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2204      	movs	r2, #4
 8001bea:	4013      	ands	r3, r2
 8001bec:	d100      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2a8>
 8001bee:	e0b5      	b.n	8001d5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	201f      	movs	r0, #31
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	055b      	lsls	r3, r3, #21
 8001c00:	4013      	ands	r3, r2
 8001c02:	d110      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0549      	lsls	r1, r1, #21
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	61da      	str	r2, [r3, #28]
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	055b      	lsls	r3, r3, #21
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d11a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0049      	lsls	r1, r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c40:	f7fe fe72 	bl	8000928 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7fe fe6d 	bl	8000928 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1f5      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10f      	bne.n	8001c90 <HAL_RCC_OscConfig+0x348>
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
 8001c7c:	e036      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	40021000 	.word	0x40021000
 8001c84:	fffeffff 	.word	0xfffeffff
 8001c88:	fffbffff 	.word	0xfffbffff
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x36a>
 8001c98:	4bca      	ldr	r3, [pc, #808]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	4bc9      	ldr	r3, [pc, #804]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
 8001ca4:	4bc7      	ldr	r3, [pc, #796]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4bc6      	ldr	r3, [pc, #792]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	2104      	movs	r1, #4
 8001cac:	438a      	bics	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x38c>
 8001cba:	4bc2      	ldr	r3, [pc, #776]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4bc1      	ldr	r3, [pc, #772]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	4bbf      	ldr	r3, [pc, #764]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	4bbe      	ldr	r3, [pc, #760]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	621a      	str	r2, [r3, #32]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001cd4:	4bbb      	ldr	r3, [pc, #748]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4bba      	ldr	r3, [pc, #744]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	438a      	bics	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
 8001ce0:	4bb8      	ldr	r3, [pc, #736]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4bb7      	ldr	r3, [pc, #732]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	438a      	bics	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe18 	bl	8000928 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe fe13 	bl	8000928 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4aaf      	ldr	r2, [pc, #700]	; (8001fc8 <HAL_RCC_OscConfig+0x680>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e19a      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	4bac      	ldr	r3, [pc, #688]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3b6>
 8001d1c:	e013      	b.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fe03 	bl	8000928 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe fdfe 	bl	8000928 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4aa5      	ldr	r2, [pc, #660]	; (8001fc8 <HAL_RCC_OscConfig+0x680>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e185      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4ba1      	ldr	r3, [pc, #644]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b9c      	ldr	r3, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	4b9b      	ldr	r3, [pc, #620]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	499d      	ldr	r1, [pc, #628]	; (8001fcc <HAL_RCC_OscConfig+0x684>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2210      	movs	r2, #16
 8001d62:	4013      	ands	r3, r2
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12a      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d6e:	4b95      	ldr	r3, [pc, #596]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	2104      	movs	r1, #4
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe fdcf 	bl	8000928 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d90:	f7fe fdca 	bl	8000928 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e152      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f1      	beq.n	8001d90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dac:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	22f8      	movs	r2, #248	; 0xf8
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	00da      	lsls	r2, r3, #3
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc2:	e034      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dcc:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dd8:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	22f8      	movs	r2, #248	; 0xf8
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	00da      	lsls	r2, r3, #3
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
 8001dee:	e01e      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df0:	4b74      	ldr	r3, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	2104      	movs	r1, #4
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dfc:	4b71      	ldr	r3, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e00:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7fe fd8e 	bl	8000928 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e12:	f7fe fd89 	bl	8000928 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e111      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e24:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1f1      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	4013      	ands	r3, r2
 8001e36:	d05c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d00e      	beq.n	8001e62 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d114      	bne.n	8001e7a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e50:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	401a      	ands	r2, r3
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x5a8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d03c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0e6      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01b      	beq.n	8001eba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e86:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0249      	lsls	r1, r1, #9
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe fd4a 	bl	8000928 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7fe fd45 	bl	8000928 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0cd      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eac:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x552>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	4943      	ldr	r1, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x688>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fd2f 	bl	8000928 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7fe fd2a 	bl	8000928 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0b2      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	025b      	lsls	r3, r3, #9
 8001eea:	4013      	ands	r3, r2
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x588>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ef0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d100      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b4>
 8001efa:	e0a4      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	220c      	movs	r2, #12
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5c2>
 8001f08:	e078      	b.n	8001ffc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d14c      	bne.n	8001fac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f18:	492e      	ldr	r1, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x68c>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fd03 	bl	8000928 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fcfe 	bl	8000928 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e086      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_RCC_OscConfig+0x690>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0449      	lsls	r1, r1, #17
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fcd1 	bl	8000928 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe fccc 	bl	8000928 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	049b      	lsls	r3, r3, #18
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x644>
 8001faa:	e04c      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <HAL_RCC_OscConfig+0x68c>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fcb6 	bl	8000928 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x6a6>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00001388 	.word	0x00001388
 8001fcc:	efffffff 	.word	0xefffffff
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	feffffff 	.word	0xfeffffff
 8001fd8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe fca4 	bl	8000928 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e02c      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_RCC_OscConfig+0x708>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	049b      	lsls	r3, r3, #18
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x694>
 8001ffa:	e024      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e01f      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x708>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_OscConfig+0x708>)
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	429a      	cmp	r2, r3
 8002022:	d10e      	bne.n	8002042 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	220f      	movs	r2, #15
 8002028:	401a      	ands	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	23f0      	movs	r3, #240	; 0xf0
 8002036:	039b      	lsls	r3, r3, #14
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b008      	add	sp, #32
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0bf      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d911      	bls.n	800209a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0a6      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d015      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2204      	movs	r2, #4
 80020aa:	4013      	ands	r3, r2
 80020ac:	d006      	beq.n	80020bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020b4:	21e0      	movs	r1, #224	; 0xe0
 80020b6:	00c9      	lsls	r1, r1, #3
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	4393      	bics	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d04c      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	4013      	ands	r3, r2
 80020ec:	d120      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07a      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	4013      	ands	r3, r2
 8002104:	d114      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06e      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	4013      	ands	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e062      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e05b      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fbf0 	bl	8000928 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	e009      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7fe fbeb 	bl	8000928 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1a4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e042      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	220c      	movs	r2, #12
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d211      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e020      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_RCC_ClockConfig+0x1a8>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021c4:	f000 f820 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c8:	0001      	movs	r1, r0
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1ac>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	000a      	movs	r2, r1
 80021da:	40da      	lsrs	r2, r3
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 80021de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fb5b 	bl	800089c <HAL_InitTick>
  
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	00001388 	.word	0x00001388
 80021fc:	fffff8ff 	.word	0xfffff8ff
 8002200:	08002d0c 	.word	0x08002d0c
 8002204:	20000000 	.word	0x20000000

08002208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08f      	sub	sp, #60	; 0x3c
 800220c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800220e:	2314      	movs	r3, #20
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002216:	c313      	stmia	r3!, {r0, r1, r4}
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4a36      	ldr	r2, [pc, #216]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002220:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002222:	c313      	stmia	r3!, {r0, r1, r4}
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	220c      	movs	r2, #12
 8002246:	4013      	ands	r3, r2
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d047      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xd4>
 800224c:	d849      	bhi.n	80022e2 <HAL_RCC_GetSysClockFreq+0xda>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x50>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x56>
 8002256:	e044      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002258:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800225c:	e044      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	220f      	movs	r2, #15
 8002264:	4013      	ands	r3, r2
 8002266:	2214      	movs	r2, #20
 8002268:	18ba      	adds	r2, r7, r2
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	220f      	movs	r2, #15
 8002274:	4013      	ands	r3, r2
 8002276:	1d3a      	adds	r2, r7, #4
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227e:	23c0      	movs	r3, #192	; 0xc0
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	401a      	ands	r2, r3
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	429a      	cmp	r2, r3
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800228c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800228e:	481c      	ldr	r0, [pc, #112]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002290:	f7fd ff3a 	bl	8000108 <__udivsi3>
 8002294:	0003      	movs	r3, r0
 8002296:	001a      	movs	r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	4353      	muls	r3, r2
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80022a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	401a      	ands	r2, r3
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	025b      	lsls	r3, r3, #9
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b2:	4814      	ldr	r0, [pc, #80]	; (8002304 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022b4:	f7fd ff28 	bl	8000108 <__udivsi3>
 80022b8:	0003      	movs	r3, r0
 80022ba:	001a      	movs	r2, r3
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	4353      	muls	r3, r2
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c8:	f7fd ff1e 	bl	8000108 <__udivsi3>
 80022cc:	0003      	movs	r3, r0
 80022ce:	001a      	movs	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	4353      	muls	r3, r2
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022da:	e005      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00f      	add	sp, #60	; 0x3c
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	08002cec 	.word	0x08002cec
 80022f8:	08002cfc 	.word	0x08002cfc
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	02dc6c00 	.word	0x02dc6c00

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_RCC_GetHCLKFreq+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002320:	f7ff fff2 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002324:	0001      	movs	r1, r0
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	2207      	movs	r2, #7
 800232e:	4013      	ands	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	40d9      	lsrs	r1, r3
 8002336:	000b      	movs	r3, r1
}    
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	08002d1c 	.word	0x08002d1c

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002364:	e08e      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2017      	movs	r0, #23
 8002368:	183b      	adds	r3, r7, r0
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	055b      	lsls	r3, r3, #21
 8002376:	4013      	ands	r3, r2
 8002378:	d110      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0549      	lsls	r1, r1, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
 8002388:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d11a      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a8:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b5f      	ldr	r3, [pc, #380]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fab7 	bl	8000928 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	e008      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7fe fab2 	bl	8000928 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0a6      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b56      	ldr	r3, [pc, #344]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023de:	4b52      	ldr	r3, [pc, #328]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d034      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	23c0      	movs	r3, #192	; 0xc0
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d02c      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002400:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002406:	4013      	ands	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0249      	lsls	r1, r1, #9
 8002414:	430a      	orrs	r2, r1
 8002416:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800241e:	4945      	ldr	r1, [pc, #276]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002420:	400a      	ands	r2, r1
 8002422:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fa79 	bl	8000928 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fa74 	bl	8000928 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e067      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800246a:	430a      	orrs	r2, r1
 800246c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246e:	2317      	movs	r3, #23
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800247e:	492f      	ldr	r1, [pc, #188]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002480:	400a      	ands	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	2203      	movs	r2, #3
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2220      	movs	r2, #32
 80024c6:	4013      	ands	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	2210      	movs	r2, #16
 80024d0:	4393      	bics	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	4393      	bics	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800251a:	430a      	orrs	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b006      	add	sp, #24
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	fffffcff 	.word	0xfffffcff
 8002534:	fffeffff 	.word	0xfffeffff
 8002538:	00001388 	.word	0x00001388
 800253c:	efffffff 	.word	0xefffffff
 8002540:	fffcffff 	.word	0xfffcffff

08002544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e044      	b.n	80025e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2274      	movs	r2, #116	; 0x74
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f7fe f8e3 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2224      	movs	r2, #36	; 0x24
 8002572:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2101      	movs	r1, #1
 8002580:	438a      	bics	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f830 	bl	80025ec <UART_SetConfig>
 800258c:	0003      	movs	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e024      	b.n	80025e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 f9ab 	bl	80028fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	490d      	ldr	r1, [pc, #52]	; (80025e8 <HAL_UART_Init+0xa4>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	212a      	movs	r1, #42	; 0x2a
 80025c2:	438a      	bics	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fa43 	bl	8002a64 <UART_CheckIdleState>
 80025de:	0003      	movs	r3, r0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	ffffb7ff 	.word	0xffffb7ff

080025ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f4:	231e      	movs	r3, #30
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4aaf      	ldr	r2, [pc, #700]	; (80028d8 <UART_SetConfig+0x2ec>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4aaa      	ldr	r2, [pc, #680]	; (80028dc <UART_SetConfig+0x2f0>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4aa1      	ldr	r2, [pc, #644]	; (80028e0 <UART_SetConfig+0x2f4>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a9d      	ldr	r2, [pc, #628]	; (80028e4 <UART_SetConfig+0x2f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d127      	bne.n	80026c2 <UART_SetConfig+0xd6>
 8002672:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <UART_SetConfig+0x2fc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	2203      	movs	r2, #3
 8002678:	4013      	ands	r3, r2
 800267a:	2b03      	cmp	r3, #3
 800267c:	d00d      	beq.n	800269a <UART_SetConfig+0xae>
 800267e:	d81b      	bhi.n	80026b8 <UART_SetConfig+0xcc>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d014      	beq.n	80026ae <UART_SetConfig+0xc2>
 8002684:	d818      	bhi.n	80026b8 <UART_SetConfig+0xcc>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <UART_SetConfig+0xa4>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d00a      	beq.n	80026a4 <UART_SetConfig+0xb8>
 800268e:	e013      	b.n	80026b8 <UART_SetConfig+0xcc>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e065      	b.n	8002766 <UART_SetConfig+0x17a>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e060      	b.n	8002766 <UART_SetConfig+0x17a>
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e05b      	b.n	8002766 <UART_SetConfig+0x17a>
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2208      	movs	r2, #8
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e056      	b.n	8002766 <UART_SetConfig+0x17a>
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2210      	movs	r2, #16
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e051      	b.n	8002766 <UART_SetConfig+0x17a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a89      	ldr	r2, [pc, #548]	; (80028ec <UART_SetConfig+0x300>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d134      	bne.n	8002736 <UART_SetConfig+0x14a>
 80026cc:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <UART_SetConfig+0x2fc>)
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	23c0      	movs	r3, #192	; 0xc0
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	22c0      	movs	r2, #192	; 0xc0
 80026d8:	0292      	lsls	r2, r2, #10
 80026da:	4293      	cmp	r3, r2
 80026dc:	d017      	beq.n	800270e <UART_SetConfig+0x122>
 80026de:	22c0      	movs	r2, #192	; 0xc0
 80026e0:	0292      	lsls	r2, r2, #10
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d822      	bhi.n	800272c <UART_SetConfig+0x140>
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0292      	lsls	r2, r2, #10
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <UART_SetConfig+0x136>
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0292      	lsls	r2, r2, #10
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d81a      	bhi.n	800272c <UART_SetConfig+0x140>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <UART_SetConfig+0x118>
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0252      	lsls	r2, r2, #9
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00a      	beq.n	8002718 <UART_SetConfig+0x12c>
 8002702:	e013      	b.n	800272c <UART_SetConfig+0x140>
 8002704:	231f      	movs	r3, #31
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e02b      	b.n	8002766 <UART_SetConfig+0x17a>
 800270e:	231f      	movs	r3, #31
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e026      	b.n	8002766 <UART_SetConfig+0x17a>
 8002718:	231f      	movs	r3, #31
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2204      	movs	r2, #4
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e021      	b.n	8002766 <UART_SetConfig+0x17a>
 8002722:	231f      	movs	r3, #31
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2208      	movs	r2, #8
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e01c      	b.n	8002766 <UART_SetConfig+0x17a>
 800272c:	231f      	movs	r3, #31
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2210      	movs	r2, #16
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e017      	b.n	8002766 <UART_SetConfig+0x17a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6d      	ldr	r2, [pc, #436]	; (80028f0 <UART_SetConfig+0x304>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d104      	bne.n	800274a <UART_SetConfig+0x15e>
 8002740:	231f      	movs	r3, #31
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e00d      	b.n	8002766 <UART_SetConfig+0x17a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <UART_SetConfig+0x308>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d104      	bne.n	800275e <UART_SetConfig+0x172>
 8002754:	231f      	movs	r3, #31
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e003      	b.n	8002766 <UART_SetConfig+0x17a>
 800275e:	231f      	movs	r3, #31
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2210      	movs	r2, #16
 8002764:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	429a      	cmp	r2, r3
 8002770:	d15d      	bne.n	800282e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002772:	231f      	movs	r3, #31
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d015      	beq.n	80027a8 <UART_SetConfig+0x1bc>
 800277c:	dc18      	bgt.n	80027b0 <UART_SetConfig+0x1c4>
 800277e:	2b04      	cmp	r3, #4
 8002780:	d00d      	beq.n	800279e <UART_SetConfig+0x1b2>
 8002782:	dc15      	bgt.n	80027b0 <UART_SetConfig+0x1c4>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <UART_SetConfig+0x1a2>
 8002788:	2b02      	cmp	r3, #2
 800278a:	d005      	beq.n	8002798 <UART_SetConfig+0x1ac>
 800278c:	e010      	b.n	80027b0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800278e:	f7ff fdc5 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002792:	0003      	movs	r3, r0
 8002794:	61bb      	str	r3, [r7, #24]
        break;
 8002796:	e012      	b.n	80027be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002798:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <UART_SetConfig+0x30c>)
 800279a:	61bb      	str	r3, [r7, #24]
        break;
 800279c:	e00f      	b.n	80027be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800279e:	f7ff fd33 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80027a2:	0003      	movs	r3, r0
 80027a4:	61bb      	str	r3, [r7, #24]
        break;
 80027a6:	e00a      	b.n	80027be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	61bb      	str	r3, [r7, #24]
        break;
 80027ae:	e006      	b.n	80027be <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027b4:	231e      	movs	r3, #30
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
        break;
 80027bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d100      	bne.n	80027c6 <UART_SetConfig+0x1da>
 80027c4:	e07b      	b.n	80028be <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	18d2      	adds	r2, r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0019      	movs	r1, r3
 80027d8:	0010      	movs	r0, r2
 80027da:	f7fd fc95 	bl	8000108 <__udivsi3>
 80027de:	0003      	movs	r3, r0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	d91c      	bls.n	8002824 <UART_SetConfig+0x238>
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d217      	bcs.n	8002824 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	200e      	movs	r0, #14
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	210f      	movs	r1, #15
 80027fe:	438a      	bics	r2, r1
 8002800:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	2207      	movs	r2, #7
 800280a:	4013      	ands	r3, r2
 800280c:	b299      	uxth	r1, r3
 800280e:	183b      	adds	r3, r7, r0
 8002810:	183a      	adds	r2, r7, r0
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	183a      	adds	r2, r7, r0
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	e04c      	b.n	80028be <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002824:	231e      	movs	r3, #30
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e047      	b.n	80028be <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800282e:	231f      	movs	r3, #31
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d015      	beq.n	8002864 <UART_SetConfig+0x278>
 8002838:	dc18      	bgt.n	800286c <UART_SetConfig+0x280>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00d      	beq.n	800285a <UART_SetConfig+0x26e>
 800283e:	dc15      	bgt.n	800286c <UART_SetConfig+0x280>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <UART_SetConfig+0x25e>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d005      	beq.n	8002854 <UART_SetConfig+0x268>
 8002848:	e010      	b.n	800286c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284a:	f7ff fd67 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800284e:	0003      	movs	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
        break;
 8002852:	e012      	b.n	800287a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <UART_SetConfig+0x30c>)
 8002856:	61bb      	str	r3, [r7, #24]
        break;
 8002858:	e00f      	b.n	800287a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285a:	f7ff fcd5 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
        break;
 8002862:	e00a      	b.n	800287a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	61bb      	str	r3, [r7, #24]
        break;
 800286a:	e006      	b.n	800287a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002870:	231e      	movs	r3, #30
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
        break;
 8002878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01e      	beq.n	80028be <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	085a      	lsrs	r2, r3, #1
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	18d2      	adds	r2, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f7fd fc39 	bl	8000108 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	b29b      	uxth	r3, r3
 800289a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	d909      	bls.n	80028b6 <UART_SetConfig+0x2ca>
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d204      	bcs.n	80028b6 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	e003      	b.n	80028be <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80028b6:	231e      	movs	r3, #30
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028ca:	231e      	movs	r3, #30
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b008      	add	sp, #32
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	efff69f3 	.word	0xefff69f3
 80028dc:	ffffcfff 	.word	0xffffcfff
 80028e0:	fffff4ff 	.word	0xfffff4ff
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40004400 	.word	0x40004400
 80028f0:	40004800 	.word	0x40004800
 80028f4:	40004c00 	.word	0x40004c00
 80028f8:	007a1200 	.word	0x007a1200

080028fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d00b      	beq.n	8002926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <UART_AdvFeatureConfig+0x144>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d00b      	beq.n	8002948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a43      	ldr	r2, [pc, #268]	; (8002a44 <UART_AdvFeatureConfig+0x148>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2204      	movs	r2, #4
 800294e:	4013      	ands	r3, r2
 8002950:	d00b      	beq.n	800296a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a3b      	ldr	r2, [pc, #236]	; (8002a48 <UART_AdvFeatureConfig+0x14c>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2208      	movs	r2, #8
 8002970:	4013      	ands	r3, r2
 8002972:	d00b      	beq.n	800298c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <UART_AdvFeatureConfig+0x150>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2210      	movs	r2, #16
 8002992:	4013      	ands	r3, r2
 8002994:	d00b      	beq.n	80029ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <UART_AdvFeatureConfig+0x154>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2220      	movs	r2, #32
 80029b4:	4013      	ands	r3, r2
 80029b6:	d00b      	beq.n	80029d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <UART_AdvFeatureConfig+0x158>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	4013      	ands	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <UART_AdvFeatureConfig+0x15c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	035b      	lsls	r3, r3, #13
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10b      	bne.n	8002a16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <UART_AdvFeatureConfig+0x160>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <UART_AdvFeatureConfig+0x164>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
  }
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b002      	add	sp, #8
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	fffdffff 	.word	0xfffdffff
 8002a44:	fffeffff 	.word	0xfffeffff
 8002a48:	fffbffff 	.word	0xfffbffff
 8002a4c:	ffff7fff 	.word	0xffff7fff
 8002a50:	ffffefff 	.word	0xffffefff
 8002a54:	ffffdfff 	.word	0xffffdfff
 8002a58:	ffefffff 	.word	0xffefffff
 8002a5c:	ff9fffff 	.word	0xff9fffff
 8002a60:	fff7ffff 	.word	0xfff7ffff

08002a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	2100      	movs	r1, #0
 8002a72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a74:	f7fd ff58 	bl	8000928 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2208      	movs	r2, #8
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d10c      	bne.n	8002aa4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	0391      	lsls	r1, r2, #14
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <UART_CheckIdleState+0x8c>)
 8002a94:	9200      	str	r2, [sp, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f000 f82c 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e021      	b.n	8002ae8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d10c      	bne.n	8002acc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	03d1      	lsls	r1, r2, #15
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <UART_CheckIdleState+0x8c>)
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f000 f818 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d001      	beq.n	8002acc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e00d      	b.n	8002ae8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2274      	movs	r2, #116	; 0x74
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	01ffffff 	.word	0x01ffffff

08002af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b04:	e0a3      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b08:	3301      	adds	r3, #1
 8002b0a:	d100      	bne.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b0c:	e09f      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fd ff0b 	bl	8000928 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d13d      	bne.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b24:	f3ef 8310 	mrs	r3, PRIMASK
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2e:	2301      	movs	r3, #1
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	494c      	ldr	r1, [pc, #304]	; (8002c78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b60:	2301      	movs	r3, #1
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2274      	movs	r2, #116	; 0x74
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e067      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d050      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d146      	bne.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bca:	f3ef 8310 	mrs	r3, PRIMASK
 8002bce:	613b      	str	r3, [r7, #16]
  return(result);
 8002bd0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4923      	ldr	r1, [pc, #140]	; (8002c78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f383 8810 	msr	PRIMASK, r3
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002c00:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c02:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c06:	2301      	movs	r3, #1
 8002c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	438a      	bics	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2274      	movs	r2, #116	; 0x74
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e010      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	425a      	negs	r2, r3
 8002c5e:	4153      	adcs	r3, r2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	001a      	movs	r2, r3
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d100      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c6c:	e74b      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b014      	add	sp, #80	; 0x50
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	fffffe5f 	.word	0xfffffe5f

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2600      	movs	r6, #0
 8002c80:	4d0c      	ldr	r5, [pc, #48]	; (8002cb4 <__libc_init_array+0x38>)
 8002c82:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c84:	1b64      	subs	r4, r4, r5
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	f000 f821 	bl	8002cd4 <_init>
 8002c92:	4d0a      	ldr	r5, [pc, #40]	; (8002cbc <__libc_init_array+0x40>)
 8002c94:	4c0a      	ldr	r4, [pc, #40]	; (8002cc0 <__libc_init_array+0x44>)
 8002c96:	1b64      	subs	r4, r4, r5
 8002c98:	10a4      	asrs	r4, r4, #2
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	00b3      	lsls	r3, r6, #2
 8002ca2:	58eb      	ldr	r3, [r5, r3]
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	00b3      	lsls	r3, r6, #2
 8002cac:	58eb      	ldr	r3, [r5, r3]
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08002d24 	.word	0x08002d24
 8002cb8:	08002d24 	.word	0x08002d24
 8002cbc:	08002d24 	.word	0x08002d24
 8002cc0:	08002d28 	.word	0x08002d28

08002cc4 <memset>:
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	1882      	adds	r2, r0, r2
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	7019      	strb	r1, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_init>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr

08002ce0 <_fini>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr
